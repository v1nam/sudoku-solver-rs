#[cfg(test)]
pub mod tests {
    use sudoku_solver::backtrack;

    #[test]
    pub fn sudoku_solving() {
        let mut board1 = [
            [7, 8, 0, 4, 0, 0, 1, 2, 0],
            [6, 0, 0, 0, 7, 5, 0, 0, 9],
            [0, 0, 0, 6, 0, 1, 0, 7, 8],
            [0, 0, 7, 0, 4, 0, 2, 6, 0],
            [0, 0, 1, 0, 5, 0, 9, 3, 0],
            [9, 0, 4, 0, 6, 0, 0, 0, 5],
            [0, 7, 0, 3, 0, 0, 0, 1, 2],
            [1, 2, 0, 0, 0, 7, 4, 0, 0],
            [0, 4, 9, 2, 0, 6, 0, 0, 7],
        ];

        let mut board2 = [
            [6, 1, 3, 8, 0, 0, 0, 9, 0],
            [0, 0, 7, 6, 4, 0, 8, 0, 0],
            [9, 0, 0, 5, 3, 1, 0, 0, 7],
            [8, 3, 0, 0, 9, 6, 0, 0, 0],
            [0, 9, 6, 7, 0, 0, 2, 4, 0],
            [7, 4, 0, 0, 1, 0, 0, 6, 9],
            [0, 0, 8, 0, 6, 0, 4, 0, 1],
            [4, 2, 0, 0, 8, 0, 0, 3, 0],
            [0, 6, 1, 0, 0, 0, 0, 0, 0],
        ];

        let board_1_ans = [
            [7, 8, 5, 4, 3, 9, 1, 2, 6],
            [6, 1, 2, 8, 7, 5, 3, 4, 9],
            [4, 9, 3, 6, 2, 1, 5, 7, 8],
            [8, 5, 7, 9, 4, 3, 2, 6, 1],
            [2, 6, 1, 7, 5, 8, 9, 3, 4],
            [9, 3, 4, 1, 6, 2, 7, 8, 5],
            [5, 7, 8, 3, 9, 4, 6, 1, 2],
            [1, 2, 6, 5, 8, 7, 4, 9, 3],
            [3, 4, 9, 2, 1, 6, 8, 5, 7],
        ];
        let board2_ans = [
            [6, 1, 3, 8, 2, 7, 5, 9, 4],
            [2, 5, 7, 6, 4, 9, 8, 1, 3],
            [9, 8, 4, 5, 3, 1, 6, 2, 7],
            [8, 3, 2, 4, 9, 6, 1, 7, 5],
            [1, 9, 6, 7, 5, 3, 2, 4, 8],
            [7, 4, 5, 2, 1, 8, 3, 6, 9],
            [3, 7, 8, 9, 6, 2, 4, 5, 1],
            [4, 2, 9, 1, 8, 5, 7, 3, 6],
            [5, 6, 1, 3, 7, 4, 9, 8, 2],
        ];
        assert!(backtrack(&mut board2), board2_ans);
        assert!(backtrack(&mut board1), board_1_ans);
    }
}
